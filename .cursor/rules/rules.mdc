# F-Cesium Project Cursor Rules

## 项目概述
这是一个基于 Cesium.js 和 Vue 3 的 3D 地图可视化库项目。采用 monorepo 架构，使用 TypeScript、Vite、PNPM 作为主要技术栈。

## 技术栈
- **前端框架**: Vue 3 + TypeScript
- **3D 引擎**: Cesium.js
- **构建工具**: Vite
- **包管理器**: PNPM
- **UI 组件库**: Ant Design Vue
- **状态管理**: Pinia
- **路由**: Vue Router
- **样式**: Less
- **代码规范**: ESLint + Prettier

## 项目结构
```
├── packages/           # 核心库包
│   ├── f-cesium/      # 主要的 Cesium 封装库
│   └── draw/          # 绘制功能模块
├── playground/        # 开发测试环境
├── docs/             # 文档
└── dist/             # 构建产物
```

## 代码规范

### 格式化配置
- 使用 2 空格缩进
- 不使用分号
- 使用双引号
- 行宽限制 80 字符
- 不使用尾随逗号

### 命名规范
- **文件命名**: 使用 kebab-case (如: `layer-management`)
- **组件命名**: 使用 PascalCase (如: `MapViewer`)
- **函数/变量**: 使用 camelCase (如: `initializeMap`)
- **常量**: 使用 UPPER_SNAKE_CASE (如: `DEFAULT_TERRAIN_URL`)
- **类型定义**: 使用 PascalCase 并以 `I` 开头 (如: `IMapOptions`)

### TypeScript 规范
- 优先使用类型推断，必要时显式声明类型
- 接口定义以 `I` 开头
- 枚举使用 PascalCase
- 泛型参数使用 `T, K, V` 等单字母或描述性名称

### Vue 组件规范
- 组件名使用 PascalCase
- Props 使用 camelCase
- 事件名使用 kebab-case
- 优先使用 Composition API
- 使用 `<script setup>` 语法

### Cesium 相关规范
- Cesium 实例和资源需要正确销毁以避免内存泄漏
- 使用 Cesium 的 Resource 类处理网络请求
- 地理坐标使用弧度制，UI 显示使用度制
- 大量数据渲染时考虑性能优化（LOD、分页等）

## 开发指南

### 新功能开发
1. 在 `packages/f-cesium/src` 下创建对应模块
2. 在 `playground` 中创建测试页面
3. 添加类型定义到 `types` 目录
4. 更新导出到 `index.ts`

### 目录结构约定
```
src/
├── core/              # 核心功能模块
│   ├── initMap/       # 地图初始化
│   ├── camera/        # 相机控制
│   ├── draw/          # 绘制功能
│   ├── layer-management/  # 图层管理
│   ├── data-management/   # 数据管理
│   └── visualization/     # 可视化效果
├── components/        # Vue 组件
├── types/            # TypeScript 类型定义
└── utils/            # 工具函数
```

### 性能考虑
- 避免在渲染循环中创建新对象
- 使用 Cesium 的 CallbackProperty 处理动态数据
- 大数据集使用 DataSource 而非直接添加 Entity
- 适当使用 requestIdleCallback 处理非关键任务

### 错误处理
- 网络请求统一错误处理
- Cesium 初始化失败的降级方案
- 资源加载失败的重试机制

## 依赖管理
- 使用 PNPM 管理依赖
- 新依赖添加到正确的 workspace
- 保持依赖版本的一致性
- 定期更新依赖并测试兼容性

## 构建和部署
- 开发环境使用 `pnpm dev`
- 构建使用 `pnpm build`
- 类型检查使用 `pnpm type-check`
- 代码检查使用 `pnpm lint`

## 测试规范
- 单元测试覆盖核心功能
- 集成测试验证 Cesium 交互
- 端到端测试覆盖关键用户流程

## 文档规范
- 所有公开 API 必须有 JSDoc 注释
- 复杂算法添加详细注释
- README 文件保持最新
- 示例代码要能正常运行

## 提交规范
使用 Conventional Commits 格式：
- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档变更
- `style`: 代码格式化
- `refactor`: 重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

## 特别注意事项
- Cesium 相关代码需要考虑 WebGL 上下文丢失的情况
- 大地理数据处理时注意内存使用
- 跨浏览器兼容性测试，特别是 WebGL 支持
- 移动端性能优化考虑
- 地理坐标系转换的精度问题 